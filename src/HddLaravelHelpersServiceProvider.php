<?php

namespace HassanDomeDenea\HddLaravelHelpers;

use HassanDomeDenea\HddLaravelHelpers\Commands\AddPermissionsCommand;
use HassanDomeDenea\HddLaravelHelpers\Commands\GenerateRoutesTypesCommand;
use HassanDomeDenea\HddLaravelHelpers\Commands\HddLaravelHelpersCommand;
use HassanDomeDenea\HddLaravelHelpers\Helpers\ApiResponse;
use HassanDomeDenea\HddLaravelHelpers\Providers\CustomRelationProvider;
use HassanDomeDenea\HddLaravelHelpers\Providers\YamlTranslationServiceProvider;
use Illuminate\Routing\ResponseFactory;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Str;
use Spatie\LaravelPackageTools\Exceptions\InvalidPackage;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class HddLaravelHelpersServiceProvider extends PackageServiceProvider
{
    /**
     * @throws InvalidPackage
     */
    public function register(): void
    {
        app()->register(YamlTranslationServiceProvider::class);
        app()->register(CustomRelationProvider::class);


        Route::macro('apiResourceMany', function (string $name, string $controller, ?array $only = null) {
            if ($only === null) {
                $only = ['search', 'storeMany', 'updateMany', 'destroyMany', 'reorder', 'list', 'audits'];
            }

            if (in_array('audits', $only)) {

                Route::get($name . "/{".Str::singular($name)."}/audits", [$controller, 'audits'])->name($name . '.audits');
            }
            if (in_array('list', $only)) {
                Route::get($name . '/list', [$controller, 'list'])->name($name . '.list');
            }
            if (in_array('reorder', $only)) {
                Route::put($name . '/reorder', [$controller, 'reorder'])->name($name . '.reorder');
            }
            if (in_array('search', $only)) {
                Route::get($name . '/search', [$controller, 'search'])->name($name . '.search');
            }
            if (in_array('storeMany', $only)) {
                Route::post($name . '/many', [$controller, 'storeMany'])->name($name . '.store-many');
            }
            if (in_array('updateMany', $only)) {
                Route::put($name, [$controller, 'updateMany'])->name($name . '.update-many');
            }
            if (in_array('destroyMany', $only)) {
                Route::delete($name, [$controller, 'destroyMany'])->name($name . '.destroy-many');
            }


            return Route::apiResource($name, $controller);
        });

        ResponseFactory::macro('apiSuccess', function ($data, $status = 200) {
            return apiResponse()->success($data, $status);
        });
        ResponseFactory::macro('apiFail', function ($data, $status = 400) {
            return apiResponse()->fail($data, $status);
        });


        parent::register(); // TODO: Change the autogenerated stub

        $vendorPath = base_path('vendor/hassandomedenea/hddlaravelhelpers/src');
        $autoDiscoverTypes = config()->array('typescript-transformer.auto_discover_types', fn() => []);
        if ($autoDiscoverTypes && !in_array($vendorPath, $autoDiscoverTypes)) {
            $autoDiscoverTypes[] = $vendorPath;
            config()->set('typescript-transformer.auto_discover_types', $autoDiscoverTypes);
        }
    }

    public function boot(): self
    {
        if ($this->app->runningInConsole()) {
            /*   $this->commands([
                   InstallCommand::class,
               ]);*/
        }

        return parent::boot();
    }

    public function bootingPackage()
    {
        require_once __DIR__ . '/helpers.php';

        parent::bootingPackage();
    }

    public function configurePackage(Package $package): void
    {
        /*
         * This class is a Package Service Provider
         *
         * More info: https://github.com/spatie/laravel-package-tools
         */
        $package
            ->name('HddLaravelHelpers')
            ->hasConfigFile('hdd-laravel-helpers')
            ->hasRoutes('api', 'web')
//            ->hasViews()
//            ->hasMigration('create_hddlaravelhelpers_table')
            ->hasCommands(
                [
                    GenerateRoutesTypesCommand::class,
                    AddPermissionsCommand::class,
                    HddLaravelHelpersCommand::class,
                ]
            );
    }
}
